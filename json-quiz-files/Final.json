{
    "questions": [
        {
            "question_text": "<h2>Instructions</h2>\n<p>The questions on this exam are divided into 8 sections.</p>\n<p>Each section begins with a section header that presents a programming question, followed by True/False questions that present possible solutions to the problem in the section header. If the possible solution is valid, mark it as True. If it is not a valid solution, mark it as False.\u00a0</p>\n<p><strong>There may be more than one valid solution in each section.</strong></p>\n<p>You can think of each section as a single select-all-that-apply problem, where you get a point for each item you identify correctly as being a valid or invalid solution to the problem.</p>",
            "question_type": "text_only_question"
        },
        {
            "question_text": "<h1>Questions 1-4</h1>\n<p>Given the program <code>counting.py</code>, where the number of uppercase, lowercase, and digits are printed, which implementation(s) of <code>count_characters</code> correctly produce the following execution?</p>\n<p><strong><code>counting.py</code></strong></p>\n<pre><code class=\"python\">def count_characters(input_string): ...\n\n\ndef main():\n    input_string = input('Input: ')\n    counts = count_characters(input_string)\n    print(counts)\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre>\n\n<p><strong>Execution</strong></p>\n<pre><code class=\"text\">python counting.py\nInput: I LOVE pie (not 3.14)\n(5, 6, 3)\n</code></pre>",
            "question_type": "text_only_question"
        },
        {
            "question_text": "<pre><code class=\"python\">def count_characters(input_string):\n    upper_count, lower_count, digit_count = 0, 0, 0\n    for char in input_string:\n        if char.isupper():\n            upper_count += 1\n        elif char.islower():\n            lower_count += 1\n        elif char.isdigit():\n            digit_count += 1\n    return (upper_count, lower_count, digit_count)\n</code></pre>",
            "question_type": "true_false_question",
            "points_possible": 1,
            "answers": [
                {
                    "answer_text": "True",
                    "answer_weight": 100
                },
                {
                    "answer_text": "False",
                    "answer_weight": 0
                }
            ]
        },
        {
            "question_text": "<pre><code class=\"python\">def count_characters(input_string):\n    upper_count = input_string.count('isupper')\n    lower_count = input_string.count('islower')\n    digit_count = input_string.count('isdigit')\n    return (upper_count, lower_count, digit_count)\n</code></pre>",
            "question_type": "true_false_question",
            "points_possible": 1,
            "answers": [
                {
                    "answer_text": "True",
                    "answer_weight": 0
                },
                {
                    "answer_text": "False",
                    "answer_weight": 100
                }
            ]
        },
        {
            "question_text": "<pre><code class=\"python\">def count_characters(input_string):\n    upper_count, lower_count, digit_count = 0, 0, 0\n    for char in input_string:\n        if char.upper():\n            upper_count += 1\n        if char.lower():\n            lower_count += 1\n        if char.isdigit():\n            digit_count += 1\n    return (upper_count, lower_count, digit_count)\n</code></pre>",
            "question_type": "true_false_question",
            "points_possible": 1,
            "answers": [
                {
                    "answer_text": "True",
                    "answer_weight": 0
                },
                {
                    "answer_text": "False",
                    "answer_weight": 100
                }
            ]
        },
        {
            "question_text": "<pre><code class=\"python\">def count_characters(input_string):\n    upper_count, lower_count, digit_count = 0, 0, 0\n    for word in input_string.split():\n        if word.isupper():\n            upper_count += 1\n        elif word.islower():\n            lower_count += 1\n        elif word.isdigit():\n            digit_count += 1\n    return (upper_count, lower_count, digit_count)\n</code></pre>",
            "question_type": "true_false_question",
            "points_possible": 1,
            "answers": [
                {
                    "answer_text": "True",
                    "answer_weight": 0
                },
                {
                    "answer_text": "False",
                    "answer_weight": 100
                }
            ]
        },
        {
            "question_text": "<h1>Questions 5-8</h1>",
            "question_type": "text_only_question"
        },
        {
            "question_text": "<pre><code class=\"python\">def \n</code></pre>",
            "question_type": "true_false_question",
            "points_possible": 1,
            "answers": [
                {
                    "answer_text": "True",
                    "answer_weight": 100
                },
                {
                    "answer_text": "False",
                    "answer_weight": 0
                }
            ]
        },
        {
            "question_text": "<p>trees</p>",
            "question_type": "true_false_question",
            "points_possible": 1,
            "answers": [
                {
                    "answer_text": "True",
                    "answer_weight": 0
                },
                {
                    "answer_text": "False",
                    "answer_weight": 100
                }
            ]
        },
        {
            "question_text": "<pre><code class=\"python\">def main():\n    print('Hello, world!')\n</code></pre>",
            "question_type": "true_false_question",
            "points_possible": 1,
            "answers": [
                {
                    "answer_text": "True",
                    "answer_weight": 0
                },
                {
                    "answer_text": "False",
                    "answer_weight": 100
                }
            ]
        },
        {
            "question_text": "<pre><code class=\"python\">def main():\n    print('Hello, world!')\n</code></pre>",
            "question_type": "true_false_question",
            "points_possible": 1,
            "answers": [
                {
                    "answer_text": "True",
                    "answer_weight": 100
                },
                {
                    "answer_text": "False",
                    "answer_weight": 0
                }
            ]
        }
    ],
    "settings": {
        "title": "Final",
        "quiz_type": "assignment",
        "assignment_group_id": 1,
        "time_limit": "240",
        "shuffle_answers": "True",
        "hide_results": null,
        "show_correct_answers": true,
        "show_correct_answers_at": "2023-12-21T23:59:00",
        "allowed_attempts": "1",
        "scoring_policy": "keep_highest",
        "one_question_at_a_time": false,
        "cant_go_back": false,
        "access_code": "start-final",
        "due_at": "2023-12-21T23:59:00",
        "lock_at": "2023-12-21T23:59:00",
        "unlock_at": "2023-12-16T00:00:00",
        "published": true,
        "one_time_results": false
    }
}