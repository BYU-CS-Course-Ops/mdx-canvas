type: quiz
title: Midterm
quiz_type: assignment
due_at: 'Mar 8, 2024, 11:59 PM'
unlock_at: 'Mar 4, 2024, 12:00 AM'
lock_at: 'Mar 8, 2024, 11:59 PM'
assignment_group: Midterm
shuffle_answers: True
time_limit: 180
allowed_attempts: 1
show_correct_answers_at: 'Mar 13, 2024, 12:00 AM'
hide_correct_answers_at: 'Apr 2,  2024, 12:00 AM'
access_code: start-midterm
description: |
    Please read and understand the following instructions before taking the midterm.
    
    This is an exam. You are on your honor to treat this exam appropriately. You are not allowed to consult any material or people during this exam.
    
    You have 180 minutes (3 hours) to take this test. Most students will finish in under 90 minutes. If you need an accommodation, contact your instructor.
    
    Prepare your exam space. Find a location where you can work uninterrupted and free from distraction for the full test-taking period.Â 
    
    **You are encouraged to have scratch paper available.**
    
    Turn off your phone. Close all applications except your browser, and close all tabs except this one.
    
    To start the test, you will need the passcode **start-midterm**. Only start the test once you intend to take and complete it.
    
    Good luck!
questions:
    # Intro Text Question: Begin with a text question to provide instructions to the student
    -   type: text
        text: |
            Some of these questions have answers that are very similar. Be sure to review all the answers for a question and not just take the first answer that looks correct.
    # Q1, Blue Red Green:
    -   type: multiple_choice
        text: | # Q1 text
            Which image will the following code produce?
            
            ```python
            from byubit import Bit
            
            def move_paint(bit, color):
                bit.move()
                bit.paint(color)
            
            @Bit.empty_world(5, 3)
            def run(bit):
                color = 'blue'
                move_paint(bit, color)
                color = 'green'
                move_paint(bit, 'red')
                move_paint(bit, color)
            
            if __name__ == '__main__':
                run(Bit.new_bit)
            ```
        answers:
            -   correct: |
                    <img src="resources/q1_bit_blue_red_green_T.png" alt="blue, red, green" style="width: 200px;"/>
            -   incorrect: |
                    <img src='resources/q1_bit_blue_blue_blue_F.png' alt='blue, blue, blue' style='width: 200px;'/>
            -   incorrect: |
                    <img src='resources/q1_bit_blue_green_green_F.png' alt='blue, green, green' style='width: 200px;'/>
            -   incorrect: |
                    <img src='resources/q1_bit_blue_red_red_F.png' alt='blue, red, red' style='width: 200px;'/>
    # Q2, RGB:
    -   type: multiple_choice # Question 2
        text: | # Q2 text
            Given the following starting world named `rgb`:
            
            <img src="resources/q2_start_world.png" alt="starting world" style="width: 300px;"/>
            
            Which block of code will produce the following end result:
            
            <img src="resources/q2_end_result.png" alt="ending world" style="width: 300px;"/>

        answers:
            -   correct: |
                    ```python
                    from byubit import Bit
                    
                    @Bit.worlds('rgb')
                    def run(bit):
                        while bit.front_clear():
                            bit.move()
                            if bit.is_red():
                                bit.paint('green')
                            elif bit.is_green():
                                bit.paint('blue')
                            else:
                                bit.erase()
                    
                    if __name__ == '__main__':
                        run(Bit.new_bit)
                    ```
            -   incorrect: | # Q2 incorrect answer 1
                    ```python
                    from byubit import Bit
                    
                    @Bit.worlds('rgb')
                    def run(bit):
                        while bit.front_clear():
                            bit.move()
                            if bit.is_red():
                                bit.paint('green')
                            if bit.is_green():
                                bit.paint('blue')
                            else:
                                bit.erase()
                    
                    if __name__ == '__main__':
                        run(Bit.new_bit)
                    ```
            -   incorrect: | # Q2 incorrect answer 2
                    ```python
                    from byubit import Bit
                    
                    @Bit.worlds('rgb')
                    def run(bit):
                        while bit.front_clear():
                            bit.move()
                            if bit.is_red():
                                bit.paint('green')
                            elif bit.is_blue():
                                bit.erase()
                            else:
                                bit.paint('blue')
                    
                    if __name__ == '__main__':
                        run(Bit.new_bit)
                    ```
            -   incorrect: | # Q2 incorrect answer 3
                    ```python
                    from byubit import Bit
                    
                    @Bit.worlds('rgb')
                    def run(bit):
                        while bit.front_clear():
                            bit.move()
                            if bit.is_red():
                                bit.paint('green')
                            elif bit.is_green():
                                bit.paint('blue')
                            elif bit.is_blue():
                                bit.erase()
                            else:
                                bit.paint('red')
                    
                    if __name__ == '__main__':
                        run(Bit.new_bit)
                    ```
    # Q3, Blue Box:
    -   type: multiple_choice # Question 3
        text: | # Q3 text
            Starting with this world:
            
            <img src="resources/q3_empty_world.png" alt="empty world" style="width: 200px;"/>
            
            Which code snippet produces this result:
            
            <img src="resources/q3_end_result.png" alt="ending world" style="width: 200px;"/>
        answers:
            -   correct: |
                    ```python
                    from byubit import Bit
                    
                    @Bit.empty_world(4, 4)
                    def run(bit):
                        while not bit.is_blue():
                            while bit.front_clear():
                                bit.paint('blue')
                                bit.move()
                            bit.left()
                    
                    run(Bit.new_bit)
                    ```
            -   incorrect: | # Q3 incorrect answer 1
                    ```python
                    from byubit import Bit
                    
                    @Bit.empty_world(4, 4)
                    def run(bit):
                        while not bit.front_clear():
                            while bit.front_clear():
                                bit.paint('blue')
                                bit.move()
                            bit.left()
                    
                    if __name__ == '__main__':
                        run(Bit.new_bit)
                    ```
            -   incorrect: | # Q3 incorrect answer 2
                    ```python
                    from byubit import Bit
                    
                    @Bit.empty_world(4, 4)
                    def run(bit):
                        while not bit.is_blue():
                            while bit.front_clear():
                                bit.move()
                                bit.paint('blue')
                            bit.left()
                    
                    if __name__ == '__main__':
                        run(Bit.new_bit)
                    ```
            -   incorrect: | # Q3 incorrect answer 3
                    ```python
                    from byubit import Bit
                    
                    @Bit.empty_world(4, 4)
                    def run(bit):
                        while not bit.is_blue():
                            bit.move()
                            bit.paint('blue')
                            if not bit.front_clear():
                                bit.left()
                    
                    if __name__ == '__main__':
                        run(Bit.new_bit)
                    ```

    # Q4, Red Bars:
    -   type: multiple_choice # Question 4
        text: | # Q4 text
            Bit starts in the following world `red_bars`:
            
            <img src="resources/q4_start_world.png" alt="starting world" style="width: 250px;"/>
            
            Which of the following implementations of `draw_bar` will produce the following result?
            
            <img src="resources/q4_end_result.png" alt="ending world" style="width: 250px;"/>
            
            
            ```python
            from byubit import Bit
            
            def go(bit, color):
                while bit.front_clear():
                    bit.move()
                    if color is not None:
                        bit.paint(color)
            
            def draw_bar(bit):
                pass
            
            @Bit.worlds('red_bars')
            def run(bit):
                while bit.front_clear():
                    bit.move()
                    if bit.is_red():
                        draw_bar(bit)
            
            if __name__ == '__main__':
                run(Bit.new_bit)
            ```

        answers:
            -   correct: |
                    ```python
                    def draw_bar(bit):
                        bit.left()
                        go(bit, 'red')
                        bit.right()
                        bit.right()
                        go(bit, None)
                        bit.left()
                    ```
            -   incorrect: | # Q4 incorrect answer 1
                    ```python
                    def draw_bar(bit):
                        go(bit, 'red')
                        bit.left()
                        bit.left()
                        go(bit, 'red')
                    ```
            -   incorrect: | # Q4 incorrect answer 2
                    ```python
                    def draw_bar(bit):
                        bit.left()
                        while bit.front_clear():
                            go(bit, None)
                            bit.left()
                            bit.left()
                            go(bit, 'red')
                            bit.left()
                    ```
            -   incorrect: | # Q4 incorrect answer 3
                    ```python
                    def draw_bar(bit):
                        bit.left()
                        go(bit, None)
                        bit.right()
                        bit.right()
                        go(bit, 'red')
                        bit.left()
                    ```
    # Q5, Mystery Functions:
    -   type: multiple_choice # Question 5
        text: | # Q5 text
            What does the following code print?
            
            ```python
            def function1(a):
                return a + 2
            
            
            def function2(a):
                return function1(a) - 5
            
            
            def main():
                result = function2(3)
                print(result)
            
            if __name__ == '__main__':
                main()
            ```
        answers:
            -   correct: "`0`"
            -   incorrect: "`-2`"
            -   incorrect: "`3`"
            -   incorrect: "`1`"
    # Q6, I like Fruit:
    -   type: multiple_choice # Question 6
        text: | # Q6 text
            Which block of code could produce the following dialog:
            
            ```text
            Give me a fruit: pear
            Those are fine.
            Give me a fruit: banana
            Those are fine.
            Give me a fruit: apple
            I like that!
            Goodbye!
            ```
        answers:
            -   correct: |
                    ```python
                    def main():
                        while True:
                            fruit = input('Give me a fruit: ')
                            if fruit == 'apple':
                                print('I like that!')
                                break
                            elif fruit == 'durian':
                                print('No thank you!')
                            else:
                                print('Those are fine.')
                        print('Goodbye!')
                    
                    if __name__ == '__main__':
                        main()
                    ```
            -   incorrect: | # Q6 incorrect answer 1
                    ```python
                    def main():
                        while True:
                            fruit = input('Give me a fruit: ')
                            if fruit == 'apple':
                                print('I like that!')
                                return
                            else:
                                print('Those are fine.')
                        print('Goodbye!')
                    
                    if __name__ == '__main__':
                        main()
                    ```
            -   incorrect: | # Q6 incorrect answer 2
                    ```python
                    def main():
                        while True:
                            fruit = input('Give me a fruit: ')
                            if fruit == 'apple':
                                print('I like that!')
                                break
                            elif fruit == 'banana':
                                print('Those are ok.')
                            else:
                                print('Those are fine.')
                        print('Goodbye!')
                    
                    if __name__ == '__main__':
                        main()
                    ```
            -   incorrect: | # Q6 incorrect answer 3
                    ```python
                    def main():
                        while True:
                            fruit = input('Give me a fruit: ')
                            if fruit == 'pear':
                                print('Those are fine.')
                                break
                            elif fruit == 'banana':
                                print('Those are fine.')
                                break
                            else:
                                print('I like that!')
                        print('Goodbye!')
                    
                    if __name__ == '__main__':
                        main()
                    ```
    # Q7, Pets:
    -   type: multiple_choice # Question 7
        text: | # Q7 text
            Which of the following dialogs is **NOT** possible with this code?
            
            ```python
            def want_pets():
                pets = []
                while True:
                    pet = input('What pet do you want? ')
                    if pet == '':
                        break
                    if pet == 'dinosaur':
                        print('I want one too!')
                    pets.append(pet)
                print(f'You want {len(pets)} pets.')
                if len(pets) > 3:
                    print("That's too many!")
            
            if __name__ == '__main__':
                want_pets()
            ```
        answers:
            -   correct: |
                    ```text
                    What pet do you want? gerbil
                    What pet do you want? dinosaur
                    I want one too!
                    What pet do you want? dinosaur
                    I want one too!
                    What pet do you want? fish
                    What pet do you want? 
                    You want 3 pets.
                    ```
            -   incorrect: | # Q7 incorrect answer 1
                    ```text
                    What pet do you want? dog
                    What pet do you want? cat
                    What pet do you want? bird
                    What pet do you want? horse
                    What pet do you want? 
                    You want 4 pets.
                    That's too many!
                    ```
            -   incorrect: | # Q7 incorrect answer 2
                    ```text
                    What pet do you want? 
                    You want 0 pets.
                    ```
            -   incorrect: | # Q7 incorrect answer 3
                    ```text
                    What pet do you want? dog
                    What pet do you want? dinosaur
                    I want one too!
                    What pet do you want? fish
                    What pet do you want? 
                    You want 3 pets.
                    ```

    # Q8, Modulo 2:
    -   type: multiple_choice # Question 8
        text: | # Q8 text
            What will the following block of code print?
            
            ```python
            def loop(numbers):
                for number in numbers:
                    if number % 2 == 0:
                        print(number)
            
            def dance(fruits):
                for kiwi in fruits:
                    print(f'I like {kiwi}')
            
            def main():
                numbers = [1, 4, 5, 8, 9, 12]
                dance(numbers)
                loop(numbers)
            
            if __name__ == '__main__':
                main()
            ```
        answers:
            -   correct: |
                    ```text
                    I like 1
                    I like 4
                    I like 5
                    I like 8
                    I like 9
                    I like 12
                    4
                    8
                    12
                    ```
            -   incorrect: | # Q8 incorrect answer 1
                    ```text
                    I like 1
                    I like 5
                    I like 9
                    1
                    5
                    9
                    ```
            -   incorrect: | # Q8 incorrect answer 2
                    ```text
                    I like {kiwi}
                    I like {kiwi}
                    I like {kiwi}
                    I like {kiwi}
                    I like {kiwi}
                    I like {kiwi}
                    4
                    8
                    12
                    ```
            -   incorrect: | # Q8 incorrect answer 3
                    ```text
                    I like 1
                    I like 4
                    I like 5
                    I like 8
                    I like 9
                    I like 12
                    1
                    5
                    9
                    ```
    # Q9, Keepers:
    -   type: multiple_choice # Question 9
        text: | # Q9 text
            Consider the following code and output.
            
            ```python
            def just_keepers(things):
                keepers = []
                for thing in things:
                    if keep_it(thing):
                        keepers.append(thing)
                return keepers
            
            if __name__ == '__main__':
                stuff = just_keepers([-7, 4, 12, 2, -3])
                print(stuff)
            ```
            ```text
            [-7, 12]
            ```
            Which version of `keep_it` could be used to produce that output?
        answers:
            -   correct: |
                    ```python
                    def keep_it(thing):
                        return thing > 7 or thing < -5
                    ```
            -   incorrect: | # Q9 incorrect answer 1
                    ```python
                    def keep_it(thing):
                        return thing > 8 and thing < -6
                    ```
            -   incorrect: | # Q9 incorrect answer 2
                    ```python
                    def keep_it(thing):
                        if thing >= 12:
                            return True
                        elif thing < 0:
                            return True
                        else:
                            return False
                    ```
            -   incorrect: | # Q9 incorrect answer 3
                    ```python
                    def keep_it(thing):
                        return thing > -3 or thing < 9
                    ```
    # Q10, List Patterns:
    -   type: matching # Question 10
        text: | # Q10 text
            Match each `list` pattern with the scenario it serves.
        answers:
            -   left: "You want to add an exclamation point to each word in a list."
                right: "Mapping pattern"
            -   left: "Eligibility is defined by highest grade, then by earliest application. You want to find the most eligible applicant."
                right: "Selection pattern"
            -   left: "A purchase record has information about the number of items, date, and total purchase price. You want to find the total spent across a batch of purchases."
                right: "Accumulator pattern"
            -   left: "You have a list of speech transcripts. You want only the speeches that mention prayer."
                right: "Filter pattern"
    # Q11, Code Patterns:
    -   type: matching # Question 11
        text: | # Q11 text
            Match each block of code with the pattern it demonstrates:
            
            Code Block A:
            ```python
            def find_optimal_venue(venues):
                optimal = None
                for venue in venues:
                    if optimal is None or score(optimal) < score(venue):
                        optimal = venue
                return optimal
            ```
            
            Code Block B:
            ```python
            def convert_to_metric(mileage_reports):
                new_reports = []
                for origin, destination, miles, time in mileage_reports:
                    kilometers = convert_to_km(miles)
                    new_reports.append((origin, destination, kilometers, time))
                return new_reports
            ```
            
            Code Block C:
            ```python
            def identify_priority_cases(cases):
                priorities = []
                for case in cases:
                    if is_priority(case):
                        priorities.append(case)
                return priorities
            ```
            
            Code Block D:
            ```python
            def count_points(games):
                total = 0
                for game in games:
                    team1, team2, team1_points, team2_points, location, date = game
                    total = total + team1_points + team2_points
                return total
            ```
        answers:
            -   left: "Code Block A"
                right: "Selection pattern"
            -   left: "Code Block B"
                right: "Mapping pattern"
            -   left: "Code Block C"
                right: "Filter pattern"
            -   left: "Code Block D"
                right: "Accumulator pattern"
    # Q12, Unpack Tuples:
    -   type: multiple_choice # Question 12
        text: | # Q12 text
            Consider the following code:
            
            ```python
            students = [
                ('Wright', 'John', 'economics', 'Oregon'),
                ('Sanchez-Moreno', 'Rosamaria', 'computer science', 'Florida')
            ]
            ```
            
            Which code will loop through a list of student tuples and unpack them into variables?
        answers:
        -  correct: | # Q12 correct answer 1
                ```python
                for last, first, major, state in students:
                    print(f'{first} {last} -- {major} major, from {state}')
                ```
        -   incorrect: | # Q12 incorrect answer 1
                ```python
                for every student in students:
                    print(f'{student.first} {student.last} -- {student.major} major, from {student.state}')
                ```
        -   incorrect: | # Q12 incorrect answer 2
                ```python
                while True:
                    print(f'{first} {last} -- {major} major, from {state}')
                ```
        -   incorrect: | # Q12 incorrect answer 3
                ```python
                for students in last, first, major, state:
                    print(f'{first} {last} -- {major} major, from {state}')
                ```
    # Q13, Return None:
    -   type: multiple_answers # Question 13
        text: | # Q13 text
            Consider the following code:

            ```python
            def get_participant():
                first = input('First name: ')
                last = input('Last name: ')
                age = int(input('Age: '))
                if first == '' or last == '' or age < 3:
                    return None
            
                return (first, last, age)
            ```
            
            In which of the following cases would this function return `None`? (Mark all that apply)
            
        answers:
            -   correct: | # Q13 correct answer 1
                    ```text
                    First name: Adam
                    Last name: 
                    Age: 4
                    ```
            -   correct: | # Q13 correct answer 2
                    ```text
                    First name: 
                    Last name: de Souza
                    Age: 5
                    ```
            -   correct: | # Q13 correct answer 3
                    ```text
                    First name: Preet
                    Last name: Bharara
                    Age: 2
                    ```
            -   incorrect: | # Q13 incorrect answer 1
                    ```text
                    First name: Sarah
                    Last name: Page
                    Age: 10
                    ```
    # Q14, Sandwich Toppings:
    -   type: multiple_choice # Question 14
        text: | # Q14 text
            You need to write a function that gets a person's sandwich toppings.
            
            - If they ask for onions, you need to say those are out.
            - Otherwise, add the topping to a list of toppings and return the list.
            
            Which of these functions accomplishes this?
        answers:
            -   correct: |
                    ```python
                    def get_toppings():
                        toppings = []
                        while True:
                            topping = input("Topping: ")
                            if topping == '':
                                break
                            if topping == 'onions':
                                print('Sorry we are out of onions.')
                            else:
                                toppings.append(topping)

                    return toppings
                    ```
            -   incorrect: | # Q14 incorrect answer 1
                    ```python
                    def get_toppings():
                        toppings = []
                        while topping != 'onion':
                            topping = input("Topping: ")
                    
                        if topping == 'onions':
                            print('Sorry we are out of onions.')
                    
                        toppings.append(topping)
                    
                        return toppings
                    ```
            -   incorrect: | # Q14 incorrect answer 2
                    ```python
                    def get_toppings():
                        toppings = []
                        while True:
                            topping = input("Topping: ")
                            if topping == '':
                                print('Sorry we are out of onions.')
                                break
                    
                            toppings.append(topping)
                    
                        return toppings
                    ```
            -   incorrect: | # Q14 incorrect answer 3
                    ```python
                    def get_toppings():
                        while True:
                            topping = input("Topping: ")
                            if topping is None:
                                break
                            elif topping == 'onions':
                                print('Sorry we are out of onions.')
                            else:
                                return topping
                    ```
