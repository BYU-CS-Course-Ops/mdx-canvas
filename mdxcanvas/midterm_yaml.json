[
    {
        "access_code": "start-final",
        "allowed_attempts": 1,
        "assignment_group_id": 100080,
        "cant_go_back": false,
        "description": "<h3>Before taking the exam</h3>\n<p>Please take the course completion survey: Course Completion Survey</p>\n<h2>Final Exam Instructions</h2>\n<p><strong>Please read and understand the following instructions before taking the final exam (scroll down).</strong></p>\n<p>This is an exam. You are on your honor to treat this exam appropriately. You are not allowed to consult any material or people during this exam.</p>\n<p>Please do not discuss the content of this exam with others.</p>\n<p>You have 240 minutes (4 hours) to take this test. Most students will finish in under 90 minutes. If you need an accommodation, contact your instructor before you start the exam.</p>\n<p>Prepare your exam space. Find a location where you can work uninterrupted and free from distraction for the full test-taking period. </p>\n<p>You are encouraged to have scratch paper available. </p>\n<p>Turn off your phone. Close all applications except your browser, and close all tabs except this one.</p>\n<p>Only start the test once you intend to take and complete it. To start the test, you will need the passcode: <strong>start-final</strong>. </p>\n<p>Good luck!</p>",
        "due_at": "2024-04-24T23:59:00-06:00",
        "lock_at": "2024-04-24T23:59:00-06:00",
        "name": "Final",
        "one_question_at_a_time": false,
        "one_time_results": false,
        "published": false,
        "questions": [
            {
                "question_text": "<h2>Instructions</h2>\n<p>The questions on this exam are divided into 8 sections.</p>\n<p>Each section begins with a section header that presents a programming question, followed by True/False questions that present possible solutions to the problem in the section header. If the possible solution is valid, mark it as True. If it is not a valid solution, mark it as False.\u00a0</p>\n<p><strong>There may be more than one valid solution in each section.</strong></p>\n<p>You can think of each section as a single select-all-that-apply problem, where you get a point for each item you identify correctly as being a valid or invalid solution to the problem.</p>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<h1>Questions 1-4</h1>\n<p>Given the program <code style=\"color: #000000\">counting.py</code>, where the number of uppercase, lowercase, and digits are printed, which implementation(s) of <code style=\"color: #000000\">count_characters</code> correctly produce the following execution?</p>\n<p><strong><code style=\"color: #000000\">counting.py</code></strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">def count_characters(input_string): ...\n\n\ndef main():\n    input_string = input('Input: ')\n    counts = count_characters(input_string)\n    print(counts)\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p><strong>Execution</strong></p>\n<pre class=\"codehilite\"><code class=\"language-text\">python counting.py\nInput: I LOVE pie (not 3.14)\n(5, 6, 3)\n</code></pre>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_characters(input_string):\n    upper_count, lower_count, digit_count = 0, 0, 0\n    for char in input_string:\n        if char.upper():\n            upper_count += 1\n        if char.lower():\n            lower_count += 1\n        if char.isdigit():\n            digit_count += 1\n    return (upper_count, lower_count, digit_count)\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_characters(input_string):\n    upper_count = input_string.count('isupper')\n    lower_count = input_string.count('islower')\n    digit_count = input_string.count('isdigit')\n    return (upper_count, lower_count, digit_count)\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_characters(input_string):\n    upper_count, lower_count, digit_count = 0, 0, 0\n    for word in input_string.split():\n        if word.isupper():\n            upper_count += 1\n        elif word.islower():\n            lower_count += 1\n        elif word.isdigit():\n            digit_count += 1\n    return (upper_count, lower_count, digit_count)\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_characters(input_string):\n    upper_count, lower_count, digit_count = 0, 0, 0\n    for char in input_string:\n        if char.isupper():\n            upper_count += 1\n        elif char.islower():\n            lower_count += 1\n        elif char.isdigit():\n            digit_count += 1\n    return (upper_count, lower_count, digit_count)\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<h1>Questions 5-8</h1>\n<p>Write a program that replaces all the spaces with underscores, and all the lowercase 'e's with uppercase 'E's.</p>\n<p>Which solutions are valid implementations of this program?</p>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef fix(original_string):\n    return original_string.replace(' ', '_').replace('e', 'E')\n\n\nif __name__ == '__main__':\n    print(fix(sys.argv[1]))\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef fix(original_string):\n    modified_string = original_string.replace(' ', '_')\n    modified_string.replace('e', 'E')\n    return modified_string\n\n\nif __name__ == '__main__':\n    print(fix(sys.argv[1]))\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef fix(original_string):\n    modified_string = original_string.replace(' ', '_')\n    modified_string = original_string.replace('e', 'E')\n    return modified_string\n\n\nif __name__ == '__main__':\n    print(fix(sys.argv[1]))\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef fix(original_string):\n    modified_string = ''\n    for char in original_string:\n        if char == ' ':\n            modified_string += '_'\n        elif char == 'e':\n            modified_string += 'E'\n    return modified_string\n\n\nif __name__ == '__main__':\n    print(fix(sys.argv[1]))\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<h1>Questions 9-13</h1>\n<p>The following code is found in the file <code style=\"color: #000000\">print_words.py</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef get_plain_words(text):\n    punctuations = '.,!?'\n    words = text.split()\n    stripped_words = []\n\n    for word in words:\n        stripped_word = word.strip(punctuations).lower()\n        stripped_words.append(stripped_word)\n\n    return stripped_words\n\n\nif __name__ == '__main__':\n    text = sys.argv[1]\n    result = get_plain_words(text)\n    for word in result:\n        print(word)\n</code></pre>\n<p>Which options demonstrate a valid execution of <code style=\"color: #000000\">print_words.py</code>.</p>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-text\">python print_words.py 'Hello! How are you today?'\nhello\nhow\nare\nyou\ntoday\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-text\">python print_words.py Do you know the muffin man? \ndo\nyou\nknow\nthe\nmuffin\nman?\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-text\">python print_words.py \"3.1415 begins pi.\"\n31415\nbegins\npi\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-text\">python print_words.py \"My favorite color is BLUE.\"\nMy\nfavorite\ncolor\nis\nBLUE\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-text\">python print_words.py \"To get bit to move, use bit.move()\"\nto\nget\nbit\nto\nmove\nuse\nbit.move()\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<h1>Questions 14-17</h1>\n<p>Select all of the following programs that can increase the number in the middle of each CSV row by 1.</p>\n<p><strong>Execution</strong></p>\n<pre class=\"codehilite\"><code class=\"language-text\">python add_one.py input.txt output.txt\n</code></pre>\n<p><strong><code style=\"color: #000000\">input.txt</code></strong></p>\n<pre class=\"codehilite\"><code class=\"language-text\">quail,10,Provo\nrobin,3,Provo\njunco,1,Orem\n</code></pre>\n<p><strong><code style=\"color: #000000\">output.txt</code></strong></p>\n<pre class=\"codehilite\"><code class=\"language-text\">quail,11,Provo\nrobin,4,Provo\njunco,2,Orem\n</code></pre>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef add_one(line):\n    tokens = line.split(',')\n    new_tokens = []\n    for token in tokens:\n        if token.isdigit():\n            token = str(int(token) + 1)\n        new_tokens.append(token)\n    return ','.join(new_tokens)\n\n\ndef main(input_file, output_file):\n    with open(input_file) as file:\n        lines = file.readlines()\n\n    new_lines = []\n    for line in lines:\n        new_lines.append(add_one(line))\n\n    with open(output_file, 'w') as file:\n        file.writelines(new_lines)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef main(input_file, output_file):\n    with open(input_file) as file:\n        text = file.read()\n\n    new_text = ''\n    for c in text:\n        if c.isdigit():\n            c = c + 1\n        new_text += c\n\n    with open(output_file, 'w') as file:\n        file.write(new_text)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef add_one(line):\n    tokens = line.split(',')\n    new_num = str(int(tokens[1]) + 1)\n    new_tokens = [tokens[0], new_num, tokens[2]]\n    return ','.join(new_tokens)\n\n\ndef main(input_file, output_file):\n    with open(input_file) as file:\n        lines = file.readlines()\n\n    new_lines = []\n    for line in lines:\n        new_lines.append(add_one(line))\n\n    with open(output_file, 'w') as file:\n        file.writelines(new_lines)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef add_one(line):\n    tokens = line.split(',')\n    new_num = tokens[1] + 1\n    new_tokens = [tokens[0], new_num, tokens[2]]\n    return ','.join(new_tokens)\n\n\ndef main(input_file, output_file):\n    with open(input_file) as file:\n        lines = file.readlines()\n\n    new_lines = []\n    for line in lines:\n        new_lines.append(add_one(line))\n\n    with open(output_file, 'w') as file:\n        file.writelines(new_lines)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<h1>Midway Question</h1>\n<p>What does the following expression evaluate to?</p>\n<pre class=\"codehilite\"><code class=\"language-python\">not False\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 0
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 100
                    }
                ]
            },
            {
                "question_text": "<h1>Questions 19-23</h1>\n<p>Which code blocks correctly compare two strings, character by character, and print only the characters that match?</p>\n<p>Examples:</p>\n<pre class=\"codehilite\"><code>python matches.py hourse house\nhou\n</code></pre>\n<pre class=\"codehilite\"><code>python matches.py bolus torus\nous\n</code></pre>\n<pre class=\"codehilite\"><code>python matches.py banana fruitcake\n</code></pre>\n<p>Select all that apply.</p>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef main(word1, word2):\n    matches = ''\n    for letter in word1:\n        if letter in word2:\n            matches += letter\n    print(matches)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef main(word1, word2):\n    matches = ''\n    for w1, w2 in zip(word1, word2):\n        if w1 == w2:\n            matches += w1\n    print(matches)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef main(word1, word2):\n    matches = ''\n    if word1 in word2:\n        for letter in word1:\n            matches += letter\n    print(matches)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef main(word1, word2):\n    matches = ''\n    for i in range(len(word1)):\n        if i &lt; len(word2) and word1[i] == word2[i]:\n            matches += word1[i]\n    print(matches)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef main(word1, word2):\n    for c1, c2 in zip(word1, word2):\n        if c1 == c2:\n            print(c1)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1], sys.argv[2])\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<h1>Questions 24-30</h1>\n<p>Consider the following program:</p>\n<p><strong><code style=\"color: #000000\">subs.py</code></strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef substitute(text, substitutions): ...\n\n\ndef main(text, substitutions):\n    text = substitute(text, substitutions)\n    print(text)\n\n\nif __name__ == '__main__':\n\n    options = {\n        \"bird\": \"feathered critter\",\n        \"fish\": \"wet critter\",\n        \"dog\": \"happy critter\",\n        \"cat\": \"furry critter\"\n    }\n    main(sys.argv[1], options)\n</code></pre>\n<p>Which of the following implementations of <code style=\"color: #000000\">substitute</code> can produce this execution:</p>\n<pre class=\"codehilite\"><code class=\"language-text\">python subs.py \"My dog likes to watch the fish swim. My cat wants to catch the bird in the tree.\"\nMy happy critter likes to watch the wet critter swim. My furry critter wants to catch the feathered critter in the tree.\n</code></pre>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def substitute(text, substitutions):\n    for key, value in substitutions.items():\n        text = text.replace(key, value)\n    return text\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def substitute(text, substitutions):\n    new_words = []\n    for word in text.split():\n        if word in substitutions:\n            new_words.append(substitutions[word])\n        else:\n            new_words.append(word)\n    return ' '.join(new_words)\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def substitute(text, substitutions):\n    new_text = ''\n    for word in text:\n        if word in substitutions:\n            new_text += substitutions[word]\n        else:\n            new_text += word\n    return new_text\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def substitute(text, substitutions):\n    new_text = ''\n    for word in text.split():\n        if word in substitutions:\n            new_text += substitutions[word]\n        else:\n            new_text += word\n    return new_text\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def substitute(text, substitutions):\n    new_words = []\n    for word in text.split():\n        for key, value in substitutions.items():\n            if key in word:\n                word = word.replace(key, value)\n        new_words.append(word)\n    return ' '.join(new_words\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def substitute(text, substitutions):\n    new_words = []\n    for word in text.split():\n        if word in substitutions:\n            word = substitutions[word]\n        new_words.append(word)\n    return ' '.join(new_words)\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def substitute(text, substitutions):\n    for key, value in substitutions:\n        text.replace(key, value)\n    return text\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<h1>Questions 31-35</h1>\n<p>Given the program:</p>\n<p><strong><code style=\"color: #000000\">counts.py</code></strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef count_letters(text): ...\n\n\ndef main(text):\n    counts = count_letters(text)\n    print(counts)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n</code></pre>\n<p>Which of the following implementations of <code style=\"color: #000000\">count_letters</code> will produce the following output:</p>\n<pre class=\"codehilite\"><code class=\"language-text\">python counts.py 'Apples, bananas, pears!'\n{'a': 5, 'p': 3, 'l': 1, 'e': 2, 's': 3, 'b': 1, 'n': 2, 'r': 1}\n</code></pre>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_letters(text):\n    counts = {}\n    for letter in 'abcdefghijklmnopqrstuvwxyz':\n        counts[letter] = 0\n\n    for letter in text.lower():\n        if letter.isalnum():\n            counts[letter] += 1\n\n    return counts\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_letters(text):\n    counts = {}\n    for letter in text:\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1    \n    return counts\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_letters(text):\n    counts = {}\n    for letter in text:\n        if letter.lower() not in counts:\n            counts[letter] = 0\n        counts[letter] += 1    \n    return counts\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_letters(text):\n    counts = {}\n    for letter in text.lower():\n        if not letter.isalnum():\n            break\n        elif letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n    return counts\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def count_letters(text):\n    counts = {}\n    for letter in text.lower():\n        if letter.isalnum():\n            if letter not in counts:\n                counts[letter] = 0\n            counts[letter] += 1\n    return counts\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<h1>Questions 36-39</h1>\n<p>Given the following program:</p>\n<p><strong><code style=\"color: #000000\">group_words.py</code></strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n\ndef make_groups(text): ...\n\n\ndef main(text):\n    groups = make_groups(text)\n    print(groups)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n</code></pre>\n<p>Which implementations of <code style=\"color: #000000\">make_groups</code> can produce the following output?</p>\n<pre class=\"codehilite\"><code>python group_words.py 'I, Nephi, having been born of goodly parents...'\n{1: ['i'],\n 5: ['nephi'],\n 6: ['having', 'goodly'],\n 4: ['been', 'born'],\n 2: ['of'],\n 7: ['parents']}\n</code></pre>",
                "question_type": "text_only_question"
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def make_groups(text):\n    groups = {}\n    for word in text.lower().split():\n        word = word.strip('.,!?')\n        key = len(word)\n        if key not in groups:\n            groups[key] = []\n        groups[key].append(word)\n    return groups\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def make_groups(text):\n    groups = {}\n    for word in text.split():\n        word = word.strip('.,!?').lower()\n        key = len(word)\n        if key not in groups:\n            groups[key] = [word]\n        else:\n            groups[key].append(word)\n    return groups\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def make_groups(text):\n    groups = {}\n    for word in text:\n        word = word.strip('.,!?').lower()\n        if word.lower() not in groups:\n            groups[word.lower()] = []\n        groups[word.lower()].append(word)\n    return groups\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<pre class=\"codehilite\"><code class=\"language-python\">def make_groups(text):\n    groups = {}\n    for word in text.split():\n        word = word.strip('.,!?')\n        key = len(word.lower())\n        if key not in groups:\n            groups[key] = []\n        groups[key].append(word)\n    return groups\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 100
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 0
                    }
                ]
            },
            {
                "question_text": "<h1>Last Question</h1>\n<p>What does this expression evaluate to?</p>\n<pre class=\"codehilite\"><code class=\"language-python\">1 == \"pig\"\n</code></pre>",
                "question_type": "true_false_question",
                "points_possible": 1,
                "answers": [
                    {
                        "answer_text": "True",
                        "answer_weight": 0
                    },
                    {
                        "answer_text": "False",
                        "answer_weight": 100
                    }
                ]
            }
        ],
        "quiz_type": "assignment",
        "resources": [],
        "scoring_policy": "keep_highest",
        "show_correct_answers": false,
        "show_correct_answers_last_attempt": false,
        "shuffle_answers": true,
        "time_limit": 240,
        "title": "Final",
        "type": "quiz",
        "unlock_at": "2024-04-19T00:00:00-06:00"
    }
]